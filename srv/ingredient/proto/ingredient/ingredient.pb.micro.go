// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: ingredient.proto

package ingredient

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Ingredient service

type IngredientService interface {
	Add(ctx context.Context, in *NewIngredient, opts ...client.CallOption) (*Response, error)
	GetIngredientByName(ctx context.Context, in *IngredientName, opts ...client.CallOption) (*IngredientInfo, error)
}

type ingredientService struct {
	c    client.Client
	name string
}

func NewIngredientService(name string, c client.Client) IngredientService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "ingredient"
	}
	return &ingredientService{
		c:    c,
		name: name,
	}
}

func (c *ingredientService) Add(ctx context.Context, in *NewIngredient, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Ingredient.Add", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingredientService) GetIngredientByName(ctx context.Context, in *IngredientName, opts ...client.CallOption) (*IngredientInfo, error) {
	req := c.c.NewRequest(c.name, "Ingredient.GetIngredientByName", in)
	out := new(IngredientInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ingredient service

type IngredientHandler interface {
	Add(context.Context, *NewIngredient, *Response) error
	GetIngredientByName(context.Context, *IngredientName, *IngredientInfo) error
}

func RegisterIngredientHandler(s server.Server, hdlr IngredientHandler, opts ...server.HandlerOption) error {
	type ingredient interface {
		Add(ctx context.Context, in *NewIngredient, out *Response) error
		GetIngredientByName(ctx context.Context, in *IngredientName, out *IngredientInfo) error
	}
	type Ingredient struct {
		ingredient
	}
	h := &ingredientHandler{hdlr}
	return s.Handle(s.NewHandler(&Ingredient{h}, opts...))
}

type ingredientHandler struct {
	IngredientHandler
}

func (h *ingredientHandler) Add(ctx context.Context, in *NewIngredient, out *Response) error {
	return h.IngredientHandler.Add(ctx, in, out)
}

func (h *ingredientHandler) GetIngredientByName(ctx context.Context, in *IngredientName, out *IngredientInfo) error {
	return h.IngredientHandler.GetIngredientByName(ctx, in, out)
}
